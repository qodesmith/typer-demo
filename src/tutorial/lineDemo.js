import typer from 'typer-js'
import { demoItemChange } from 'actions'
export default lineDemo

function lineDemo(dispatch, index) {
  typer('#explanation .container')
    .line(`Now let's <span class="i">really</span> dig in to <span class="lime">Typer.js</span>!`)
    .pause(1000)
    .back('all', 10)
    .continue('Introducing the <span class="lime">line</span> method:')
    .emit('line-1')
    .listen('line-2')
    .pause(1000)
    .back('all', 10)
    .continue('As you can see, <span class="lime">line</span> takes 2 arguments.')
    .pause(1000)
    .back('all', 10)
    .continue(`The 1st argument is a string.`)
    .pause()
    .line(`This is what will be typed out.`)
    .pause()
    .line(`The 2nd argument (optional) is a number.`)
    .pause()
    .line(`That's the typing speed:`)
    .pause()
    .continue(` ms per character.`)
    .pause(1200)
    .empty()
    .continue(`The higher the number, the slower the typing.`)
    .pause(1000)
    .back('all', 10)
    .continue(`Notice how things are typed out letter-by-letter.`)
    .pause(1200)
    .back('all', 10)
    .continue(`If you provide an array for the 1st argument,`)
    .emit('line-3')
    .listen('line-4')
    .line(['things', ' are', ' typed', ' out', ' word-', 'by-', 'word.'], 500)
    .pause(1500)
    .empty()
    .continue([`You can type a whole line at once like this:`])
    .pause()
    .emit('line-5')
    .listen('line-6')
    .pause(1500)
    .empty()
    .continue(`So we've seen the 1st argument can be:`)
    .line(`* a string - letter-by-letter typing`)
    .pause()
    .line(`* an array - `)
    .continue(['word-', 'by-', 'word'], 500)
    .pause()
    .continue(' typing')
    .pause(1200)
    .empty()
    .continue(`And we've seen the 2nd argument is a number.`)
    .emit('line-6a')
    .pause()
    .line(`This controls how fast the typing occurs.`)
    .pause(1200)
    .empty()
    .continue(`Now let's get <span class="i">real</span> fancy...`)
    .emit('line-7')
    .listen('line-8')
    .pause()
    .back('all', 10)
    .continue(`We can pass an options object to the 2nd argument`)
    .line(`and do some very neat <span class="i">speed</span> related things!`)
    .pause(1500)
    .empty()
    .continue(`In the example below, we've declared the <span class="mono">speed</span> property.`)
    .pause()
    .line(`This behaves the same as when we passed in a number.`)
    .pause(1000)
    .empty()
    .continue('Not so fancy?')
    .pause()
    .continue(` How 'bout <span class="i">this</span>:`)
    .emit('line-9')
    .listen('line-10')
    .line('humanized typing!')
    .pause(1000)
    .empty()
    .continue('When providing the <span class="mono">min</span> & <span class="mono">max</span> properties,')
    .line(`We're telling <span class="lime">line</span> to pick a random number between the two`)
    .line(`for each letter and use it as the speed!`)
    .pause(1200)
    .empty()
    .continue('The result?')
    .pause()
    .line(`You get humanized typing that looks <span class="i">soooo</span> real!`, { min: 30, max: 350 })
    .pause(1000)
    .empty()
    .continue(`We've got another speed trick up our sleeve:`)
    .emit('line-11')
    .listen('line-12')
    .line([`<span class="mono">totalTime</span>!`], 1)
    .pause(1200)
    .empty()
    .continue(`The <span class="mono">totalTime</span> property declares`)
    .line(`<span class="i">how long</span> typing the line should take.`)
    .pause()
    .line(`The example below will take 3 seconds to type.`)
    .pause(1000)
    .empty()
    .continue(`Are you standing?`)
    .pause()
    .continue(` Well sit down, we're not done.`)
    .pause()
    .back('all', 10)
    .continue(`The <span class="lime">line</span> method processes you're content`)
    .line(`as <span class="i">html</span> by default.`)
    .pause()
    .line('For instance:')
    .emit('line-13')
    .listen('line-14')


  const previousExampleContents1 = [
    `typer(<span class="yellow">'.someClass'</span>, <span class="mediumorchid">100</span>)`
  ]
  const previousExampleContents2 = [
    `  .cursor({ block<span class="mediumorchid">: true</span>`,
    `, blink<span class="mediumorchid">:</span> <span class="yellow">'hard'</span> })`
  ].join('')

  typer('#example .container', 40)
    .cursor({ block: true, blink: 'hard' })
    .line(previousExampleContents1, 1)
    .line([previousExampleContents2], 1)
    .listen('line-1')
    .line(`  .line(<span class="yellow">'Typer.js rules!'</span>, <span class="mediumorchid">100</span>)`)
    .emit('line-2')
    .listen('line-3')
    .back(-8, 10)
    .continue(`[<span class="yellow">'Typer.js'</span>, <span class="yellow">' rules!'</span>])`)
    .emit('line-4')
    .listen('line-5')
    .back(-8, 10)
    .continue(`[<span class="yellow">'This sentence will be typed all at once!'</span>])`)
    .emit('line-6')
    .listen('line-6a')
    .back(1, 10)
    .continue(', <span class="mediumorchid">100</span>)')
    .listen('line-7')
    .back(-8, 10)
    .continue(`<span class="yellow">'Typer.js rules!'</span>, { speed<span class="mediumorchid">: 100</span> })`)
    .emit('line-8')
    .listen('line-9')
    .back(13, 10)
    .continue('min<span class="mediumorchid">: 30</span>, max<span class="mediumorchid">: 350</span> })')
    .emit('line-10')
    .listen('line-11')
    .back(20, 10)
    .continue('totalTime<span class="mediumorchid">: 3000</span> })')
    .emit('line-12')
    .listen('line-13')
    .back(-8, 10)
    .continue(`'I have &lt;span class="italic"&gt;html&lt;/span&gt; content'`)
}
