import typer from 'typer-js'
import { demoItemChange } from 'actions'
export default lineDemo

window.typer = typer

function lineDemo(dispatch, index) {
  typer('#explanation .container')
    .line(`Now let's <span class="i">really</span> dig in to <span class="lime">Typer.js</span>!`)
    // .pause(1000)
    // .back('all', 10)
    // .continue('Introducing the <span class="lime">line</span> method:')
    // .emit('line-2')
    // .listen('line-3')
    // .pause(1000)
    // .back('all', 10)
    // .continue('As you can see, <span class="lime">line</span> takes 2 arguments.')
    // .pause()
    // .line(`There's a few possibilities with each argument,`)
    // .line(`so let's look at the 1st argument.`)
    // .pause(1500)
    // .empty()
    // .continue('Simply put, the <span class="lime">line</span> method is')
    // .line('how you type things on the screen.')
    // .pause()
    // .line(`Feed it a string and that's what gets typed out.`)
    // .pause(1500)
    // .line('What happens if we pass in array of strings?')
    // .emit('line-4')
    // .listen('line-5')
    // .empty()
    // .continue('Passing in an array of strings will...')
    // .pause()
    // .line(['Type', ' out', ' words', ' whole.'], 600)
    // .pause(1500)
    // .empty()
    // .continue(`So we've seen that the 1st argument to <span class="lime">line</span>`)
    // .line(`can be a string, which will type letter-by-letter,`)
    // .line(`or an array, which will type word-by-word.`)
    // .pause(1500)
    // .empty(`Now let's get <span class="i">real</span> fancy...`)
    // .emit('line-6')
    // .listen('line-7')
    // .empty()
    // .continue('<span class="b">SEO</span> in the house!')
    // .pause(1000)
    // .continue(` Here's why...`)
    // .pause()
    // .empty()
    // .continue('Imagine that you had a hidden <span class="mono">div</span> on the page')
    // .line('that <span class="i">contained</span> some content:')
    // .pause()
    // .emit('line-8')
    // .listen('line-9')
    // .pause()
    // .empty()
    // .continue(`While the content isn't shown, search engines can still crawl`)
    // .line(`your site and index that content.`)
    // .pause()
    // .line(`So how do we get <span class="lime">Typer</span> to type that content?`)
    // .pause(1000)
    // .line('With an object for the 1st argument!')
    // .pause()
    // .emit('line-10')
    // .listen('line-11')
    // .pause(1500)
    .empty()
    // .continue(`If you pass <span class="lime">line</span> an options object as`)
    // .line(`the first argument, you <span class="i">must</span> provide the <span class="mono">container</span> property`)
    // .line(`and just know that the 2nd argument will be ignored.`)
    // .pause(1000)
    // .empty()
    .continue(`But there's plenty more options than just <span class="mono">container</span>.`)
    .pause()
    .line(`Let's look at those.`)
    .pause(1000)
    .emit('line-12')
    .listen('line-13')
    .empty()
    .continue(`We can pass in a <span class="mono">speed</span> property`)
    .line(`which does exactly what you think it does:`)
    .pause()
    .line(`controls how fast the line is typed!`)
    .pause(1000)


  const previousExampleContents1 = [
    `typer(<span class="yellow">'.someClass'</span>, <span class="mediumorchid">100</span>)`
  ]
  const previousExampleContents2 = [
    `  .cursor({ block<span class="mediumorchid">: true</span>`,
    `, blink<span class="mediumorchid">:</span> <span class="yellow">'hard'</span> })`
  ].join('')

  typer('#example .container', 40)
    .cursor({ block: true, blink: 'hard' })

    // Populate with previous demo contents.
    .line(previousExampleContents1, 1)
    // .line([previousExampleContents2], 1)
    // .listen('line-2')
    // .line(`  .line(<span class="yellow">'Typer.js rules!'</span>, <span class="mediumorchid">100</span>)`)
    // .emit('line-3')
    // .listen('line-4')
    // .back(-8, 10)
    // .continue(`[<span class="yellow">'Type'</span>, <span class="yellow">' out'</span>, <span class="yellow">' words'</span>, <span class="yellow">' whole.'</span>], <span class="mediumorchid">600</span>)`)
    // .emit('line-5')
    // .listen('line-6')
    // .back(-8, 10)
    // .continue(`{ container<span class="mediumorchid">:</span> <span class="yellow">'.hidden-content'</span> })`)
    // .emit('line-7')
    // .listen('line-8')
    .empty()
    .continue(['<<span class="deeppink">div</span> <span class="lime">class</span>=<span class="yellow">"hidden-content"</span> <span class="lime">style</span>=<span class="yellow">"</span><span class="i darkturquoise">display</span>: <span class="darkturquoise">none</span>;<span class="yellow">"</span>>'], 1)
    .line(['  Some hidden content that search engines can find!'], 1)
    .line(['&lt;/<span class="deeppink">div</span>>'], 1)
    // .pause()
    // .emit('line-9')
    // .listen('line-10')
    .line()
    .line(previousExampleContents1, 1)
    .line([previousExampleContents2], 1)
    .pause()
    .line(`  .line({ container<span class="mediumorchid">:</span> <span class="yellow">'.hidden-content'</span> })`)
    .emit('line-11')
    .listen('line-12')
    .run(el => {
      el.querySelectorAll('[data-typer-child]').forEach((node, i) => {
        // Only remove the 1st 4.
        if (i < 4) node.remove()
      })
    })
    .back(-9, 10)
    .continue(`\n    container<span class="mediumorchid">:</span> <span class="yellow">'.hidden-content'</span>,`)
    .continue(`\n    speed<span class="mediumorchid">: 150</span>`)
    .continue(`\n  })`)
    .pause()
    .emit('line-13')
    .listen('line-14')
}
