import typer from 'typer-js'
import { demoItemChange } from 'actions'
export default lineDemo

function lineDemo(dispatch, index) {
  typer('#explanation .container')
    .line(`Now let's <span class="i">really</span> dig in to <span class="lime">Typer.js</span>!`)
    .pause(1000)
    .back('all', 10)
    .continue('Introducing the <span class="lime">line</span> method:')
    .emit('line-2')
    .listen('line-3')
    .pause(1000)
    .back('all', 10)
    .continue('As you can see, <span class="lime">line</span> takes 2 arguments.')
    .pause()
    .line(`There's a few possibilities with each argument,`)
    .line(`so let's look at the 1st argument.`)
    .pause(1500)
    .empty()
    .continue('Simply put, the <span class="lime">line</span> method is')
    .line('how you type things on the screen.')
    .pause()
    .line(`Feed it a string and that's what gets typed out.`)
    .pause(1500)
    .empty('What happens if we pass in array of strings?')
    .emit('line-4')
    .listen('line-5')
    .empty()
    .continue('Passing in an array of strings will...')
    .pause()
    .line(['Type', ' out', ' words', ' whole.'], 600)
    .pause(1500)
    .empty()
    .continue(`So we've seen that the 1st argument to <span class="lime">line</span>`)
    .line(`can be a string, which will type letter-by-letter,`)
    .line(`or an array, which will type word-by-word.`)
    .pause(1500)
    .empty(`Now let's get <span class="i">real</span> fancy...`)
    .emit('line-6')
    .listen('line-7')
    .empty()
    .continue('<span class="b">SEO</span> in the house!')
    .pause(1000)
    .continue(` Here's why...`)
    .pause()
    .empty()
    .continue('Image that you had a hidden <span class="mono">div</span> on the page')
    .line('that <span class="i">contained</span> some content:')
    .emit('line-8')
    .listen('line-9')
    .pause()
    .empty()
    .continue(`While the content isn't shown, search engines can still crawl`)
    .line(`you're site and index that content.`)
    .line(`So how do we get <span class="lime">Typer</span> to type that content?`)
    .pause(1000)
    .line('With an object for the 1st argument!')
    .emit('line-10')
    .listen('line-11')
    .pause()
    .empty()
    .continue(`The thing `)







    // .continue('Giving <span class="lime">line</span> a string results in the string')
    // .line('being typed out, character by character, at the')
    // .line('speed which you gave to <span class="lime">Typer</span> at the start.')
    // .pause(1500)
    // .empty()
    // .continue('You can provide <span class="lime">line</span> a 2nd argument, a number,')
    // .line('to specify how fast to type for <span class="i">just that line<span>:')
    // .pause()
    // .emit('line-4')
    // .listen('line-5')
    // .pause(1000)
    // .empty()
    // .continue('The example below, using <span class="mediumorchid mono">400</span>, will type ')
    // .continue('sloooowly.', 400)
    // .pause(1500)
    // .back('all', 10)
    // .continue(['What', ' if', ' you', ' want', ' to', ' type', ' words', ' out', ' whole?'], 350)
    // .pause(1000)
    // .line('Simple!')
    // .pause()
    // .continue(' Give <span class="lime">line</span> an <em>array</em> instead of a string:')
    // .emit('line-6')
    // .listen('line-7')
    // .pause(1500)
    // .empty()
    // .continue('What if you wanted to use styling?')
    // .pause()
    // .line('<span class="lime">line</span> will process HTML by default.')
    // .line('Check out the code below:')
    // .pause()
    // .emit('line-8')
    // .listen('line-9')
    // .pause(1000)
    // .empty()
    // .continue('The code below will result in a line looking like this:')
    // .pause(1000)
    // .line(['Typer.js <em>rules!</em>'])
    // .pause(3500)
    // .back('all', 10)
    // .emit('line-10')
    // .listen('line-11')
    // .pause(1000)
    // .continue(['<span style="color: lime">Typer.js</span> <strong>rules</strong>!'])
    // .pause(3500)
    // .back('all', 10)
    // .emit('line-12')
    // .listen('line-13')
    // .pause(1000)
    // .line(['Typer.<br>Types.<br>Div\'s.'])
    // .pause(3000)
    // .empty()
    // .continue('Any valid HTML is fair game for <span class="lime">line</span>.')
    // .pause(1000)
    // .line('Go nuts.')
    // .pause(1500)
    // .empty()
    // .continue('The 3rd argument for <span class="lime">line</span> is a boolean:')
    // .emit('line-14')
    // .listen('line-15')
    // .pause(2000)
    // .empty()
    // .continue('Passing in <span class="mediumorchid mono">false</span> will tell <span class="lime">line</span> to <em>not</em> process HTML.')
    // .pause()
    // .line('The code below will result in a line looking like this:')
    // .pause(1000)
    // .line(['Typer.js <strong>rules</strong>!'], false)
    // .pause(3000)
    // .empty()
    // .continue('By default, <span class="lime">line</span> <em>will</em> process the content as HTML.')
    // .pause()
    // .line('No need to pass in <span class="mediumorchid mono">true</span>.')
    // .pause()
    // .line('Also, note the 2nd & 3rd arguments are order agnostic:')
    // .emit('line-16')
    // .listen('line-17')
    // .pause(1500)
    // .empty()
    // .continue('Want another twist?')
    // .pause(1000)
    // .back('all', 10)
    // .continue('If you give <span class="lime">line</span> an object with a selector')
    // .line('as the first argument (instead of a string or an array)...')
    // .emit('line-18')
    // .listen('line-19')
    // .pause()
    // .back(3)
    // .continue(',')
    // .line("you're now using the contents of that element to supply <span class='lime'>line</span>")
    // .line('with something to type.')
    // .pause()
    // .continue(' <strong>SEO</strong> anyone?')
    // .pause(1000)
    // .continue([' ;)'])
    // .pause()
    // .empty()
    // .continue(['Boom.'])
    // .pause(1000)
    // .back('all', 10)
    // .continue('One last thing for <span class="lime">line</span>...')
    // .pause(1200)
    // .emit('line-20')
    // .listen('line-21')
    // .pause()
    // .back('all', 10)
    // .continue('Passing <em>no argument</em> to <span class="lime">line</span> will just create a blank line.')
    // .pause()
    // .line()
    // .line('&#11014; &#11014; &#11014; &#11014; &#11014; &#11014; &#11014; &#11014;')
    // .pause(1000)
    // .line('Yea, <span class="lime">line</span> can type unicode characters too :)')
    // .pause(1500)
    // .line('Moving right along...')
    // .pause()
    // .run(function() {
    //   typerDemo.next('back');
    // });

  const previousExampleContents1 = [
    `typer(<span class="yellow">'.someClass'</span>, <span class="mediumorchid">100</span>)`
  ]
  const previousExampleContents2 = [
    `  .cursor({ block<span class="mediumorchid">: true</span>`,
    `, blink<span class="mediumorchid">:</span> <span class="yellow">'hard'</span> })`
  ].join('')

  typer('#example .container', 40)
    .cursor({ block: true, blink: 'hard' })

    // Populate with previous demo contents.
    .line(previousExampleContents1, 1)
    .line([previousExampleContents2], 1)
    .listen('line-2')
    .line(`  .line(<span class="yellow">'Typer.js rules!'</span>, <span class="mediumorchid">100</span>)`)
    .emit('line-3')
    .listen('line-4')
    .back(-8, 10)
    .continue(`[<span class="yellow">'Type'</span>, <span class="yellow">' out'</span>, <span class="yellow">' words'</span>, <span class="yellow">' whole.'</span>], <span class="mediumorchid">600</span>)`)
    .emit('line-5')
    .listen('line-6')
    .back(-8, 10)
    .continue(`{ container<span class="mediumorchid">:</span> <span class="yellow">'#some-id'</span> })`)
    .emit('line-7')
    .listen('line-8')
    .empty()
    .line(['<<span class="deeppink">div</span> <span class="lime">style</span>=<span class="yellow">"</span><span class="i darkturquoise">display</span>: <span class="darkturquoise">none</span>;<span class="yellow">"</span>>'], 1)
    .line(['  Some hidden content that search engines can find!'], 1)
    .line(['<<span class="deeppink">div</span>>'], 1)
    .emit('line-9')
    .listen('line-10')
    .empty()
    .continue(previousExampleContents1, 1)
    .line([previousExampleContents2], 1)
    .pause()
    .line(`  .line({ container<span class="mediumorchid">:</span> <span class="yellow">'#some-id'</span> })`)
    .emit('line-11')
    .listen('line-12')




    .back(1)
    .continue(', <span class="mediumorchid">400</span>)')
    .emit('line-5')
    .listen('line-6')
    .back(-8, 10)
    .continue('[<span class="yellow">\'Typer.js\'</span>, <span class="yellow">\' rules!\'</span>], <span class="mediumorchid">400</span>)')
    .emit('line-7')
    .listen('line-8')
    .back(-8, 10)
    .continue('<span class="yellow">\'Typer.js &lt;em&gt;rules!&lt;/em&gt;\'</span>, <span class="mediumorchid">400</span>)')
    .emit('line-9')
    .listen('line-10')
    .back(-8, 10)
    .continue('<span class="yellow">\'&lt;span style="color: lime"&gt;Typer.js&lt;/span&gt; &lt;strong&gt;rules&lt;/strong&gt;!\'</span>, <span class="mediumorchid">400</span>)')
    .emit('line-11')
    .listen('line-12')
    .back(-8, 10)
    .continue('<span class="yellow">\'&lt;div&gt;Typer.&lt;/div&gt;&lt;div&gt;Types.&lt;/div&gt;&lt;div&gt;Div\'s.&lt;/div&gt;\'</span>, <span class="mediumorchid">400</span>)')
    .emit('line-13')
    .listen('line-14')
    .back(-8, 10)
    .continue('<span class="yellow">\'Typer.js &lt;strong&gt;rules&lt;/strong&gt;!\'</span>, <span class="mediumorchid">400</span>, <span class="mediumorchid">false</span>)')
    .emit('line-15')
    .listen('line-16')
    .back(11, 10)
    .continue('<span class="mediumorchid">false</span>, <span class="mediumorchid">400</span>)')
    .emit('line-17')
    .listen('line-18')
    .back(-8, 10)
    .continue('{el: <span class="yellow">\'.anotherClass\'</span>})')
    .emit('line-19')
    .listen('line-20')
    .back(-8, 10)
    .continue(')')
    .emit('line-21');
}
