import typer from 'typer-js'
import { demoItemChange } from 'actions'
export default cursorDemo

function cursorDemo(dispatch, index) {
  typer('#explanation .container')
    .line('Now for our first method:')
    .pause(1000)
    .continue([' <span class="lime">cursor</span>!'])
    .pause(1300)
    .back('all', 10)
    .continue('<span class="lime">Typer</span> shows a cursor by default just like real typing.')
    .pause(1000)
    .line(['How exciting!'], 1)
    .pause()
    .empty()
    .continue("While the <span class='lime'>cursor</span> method is completely <em>optional</em>,")
    .line('(<span class="lime">Typer</span> will use the default settings if it\'s not called),')
    .line("it's suggested that if used it be called first:")
    .pause(1000)
    .emit('cursor-1')
    .listen('cursor-2')
    .empty()
    .continue('The <span class="lime">cursor</span> method can take a few options.')
    .pause(1500)
    .back('all', 10)
    .continue('Option 1:')
    .pause()
    .continue(' no cursor at all!')
    .pause(1000)
    .line('This is a single argument passed to <span class="lime">cursor</span>:')
    .pause()
    .continue(['<span class="mediumorchid mono"> false</span>'])
    .emit('cursor-3')
    .listen('cursor-4')
    .line("If you don't want a cursor at all,")
    .pause()
    .continue(' pass in <span class="mediumorchid mono">false</span>.')
    .pause(1000)
    .empty()
    .continue('Option 2: an object with some properties...')
    .emit('cursor-5')
    .listen('cursor-6')
    .back('all', 10)
    .continue('<strong class="u">block</strong>')
    .pause()
    .line('By default, the cursor is the standard "line"')
    .pause(750)
    .continue([' →'])
    .pause(1500)
    .back('all', 10)
    .continue('By using<span class="mono"> block<span class="mediumorchid">: true</span></span>,')
    .line('we get the old-school style block like the one used below.')
    .pause(3000)
    .empty()
    .continue('<strong class="u">blink</strong>')
    .pause()
    .line('This cursor has a soft blinking motion')
    .continue([' →'])
    .pause(1500)
    .back(2, 10)
    .continue('.')
    .line('Soft blinking is the default setting, if not sepcified.')
    .pause(1000)
    .empty()
    .continue(['<strong class="u">blink</strong>'], 1)
    .line('The cursor below has a binary (on/off) blinking motion')
    .line(`that's achieved with<span class="mono"> blink<span class="mediumorchid">:</span> <span class="yellow">'hard'</span></span>`)
    .pause(2000)
    .empty()
    .continue('<strong class="u">color</strong>')
    .line('The color of the cursor defaults to')
    .line('whatever color the text is in the parent element.')
    .pause(1500)
    .empty()
    .continue(['<strong class="u">color</strong>'], 1)
    .line('But you can set the color of the cursor to')
    .line(`anything you'd like.`)
    .pause(1500)
    .empty()
    .continue(['<strong class="u">color</strong>'], 1)
    .line('Feed it a named color, #hex, etc.')
    .pause()
    .line('Any valid css color will do:')
    .emit('cursor-7')
    .listen('cursor-8')
    .empty()
    .continue(['<strong class="u">color</strong>'], 1)
    .line(`<span class="mono"><span class="white">color</span><span class="mediumorchid">:</span> <span class="yellow">'red' </span></span><span class="white">→</span>`)
    .run(el => el.querySelector('.typer').classList.add('red'))
    .pause(1500)
    .run(el => el.querySelector('.typer').classList.remove('red'))
    .back(6, 10)
    .continue(`<span class="mono yellow">#00ff00' </span><span class="white">→</span>`)
    .run(el => el.querySelector('.typer').classList.add('lime'))
    .pause(1500)
    .run(el => el.querySelector('.typer').classList.remove('lime'))
    .back(10, 10)
    .continue(`<span class="mono yellow">hsla(240, 100%, 50%, 1)' </span><span class="white">→</span>`)
    .run(el => el.querySelector('.typer').classList.add('blue'))
    .pause(2000)
    .run(el => el.querySelector('.typer').classList.remove('blue'))
    .empty()
    .continue(['<strong class="u">color</strong>'], 1)
    .line('If you omit the cursor object <em>or</em> method altogether,')
    .line('the following default values will be used under the hood:')
    .pause()
    .line(`<span class="mono">block<span class="mediumorchid">: false</span>, blink<span class="mediumorchid">:</span> <span class="yellow">'soft'</span></span>`)
    .pause(3000)
    .emit('cursor-9')
    .listen('cursor-10')
    .run(() => dispatch(demoItemChange(index + 1)))

  const previousExampleContents = [`typer(<span class="yellow">'.someClass'</span>, <span class="mediumorchid">100</span>)`]

  typer('#example .container', 40)
    .cursor({ block: true, blink: 'hard' })

    // Populate with previous demo contents.
    .line(previousExampleContents, 1)

    .listen('cursor-1')
    .line('  .cursor()')
    .pause(1000)
    .emit('cursor-2')
    .listen('cursor-3')
    .back(1)
    .continue('<span class="mediumorchid">false</span>)')
    .pause(1500)
    .emit('cursor-4')
    .listen('cursor-5')
    .back(6, 10)
    .continue(`{ block<span class="mediumorchid">: true</span>, blink<span class="mediumorchid">:</span> <span class="yellow">'hard'</span>, color<span class="mediumorchid">:</span> <span class="yellow">'red'</span> })`)
    .pause(2000)
    .emit('cursor-6')
    .listen('cursor-7')
    .back(7, 10)
    .continue('<span class="yellow">rgb(255, 0, 0)\'</span> })')
    .pause(1500)
    .back(18, 10)
    .continue('<span class="yellow">hsl(0, 100%, 50%)\'</span>})')
    .pause(1500)
    .back(21, 10)
    .continue('<span class="yellow">#ff0000\'</span> })')
    .pause(1500)
    .emit('cursor-8')
    .listen('cursor-9')
    .back(21, 10)
    .continue(' })')
    .emit('cursor-10')
}
